generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Users {
  userId              Int                  @id             @default(autoincrement()) @map("userId")
  id                  String               @unique                                   @map("id")
  password            String                                                         @map("password")
  money               Int                                                            @map("money")
  gamePoint           Int                                                            @map("gamePoint")
  createdAt           DateTime             @default(now())                           @map("createdAt")
  updatedAt           DateTime             @updatedAt                                @map("updatedAt")
  gamerecords         GameRecords?
  playerInventories   PlayerInventories[]
  rosters             Rosters[]
  @@map("Users")
}
model Players {
    playerId          Int                  @id             @default(autoincrement()) @map("playerId")
    playerName        String               @unique                                   @map("playerName")
    speed             Int                                                            @map("speed")
    goalDecision      Int                                                            @map("goalDecision")
    goalPower         Int                                                            @map("goalPower")
    defence           Int                                                            @map("defence")
    stamina           Int                                                            @map("stamina")
    overall           Int                                                            @map("overall")
    createdAt         DateTime                             @default(now())           @map("createdAt")
    updatedAt         DateTime                             @updatedAt                @map("updatedAt")
    playerInventories PlayerInventories[]
    rosters           Rosters[]
    @@map("Player")
}
model PlayerInventories {
    inventoryId       Int                  @id             @default(autoincrement()) @map("inventoryId")
    userId            Int                                                            @map("userId")
    playerId          Int                                                            @map("playerId")
    players           Players              @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
    users             Users                @relation(fields: [userId], references: [userId], onDelete: Cascade)
    @@map("PlayerInventories")
}
model Rosters {
    rosterId          Int                  @id             @default(autoincrement()) @map("rosterId")
    userId            Int                                                            @map("userId")
    playerId          Int                                                            @map("playerId")
    players           Players              @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
    users             Users                @relation(fields: [userId], references: [userId], onDelete: Cascade)
    @@map("Rosters")
}
model GameRecords {
    gameRecordId      Int                  @id             @default(autoincrement()) @map("gameRecordId")
    userId            Int                  @unique                                   @map("userId")
    win               Int                                                            @map("win")
    lose              Int                                                            @map("lose")
    draw              Int                                                            @map("draw")
    createdAt         DateTime                             @default(now())           @map("createdAt")
    users             Users                @relation(fields: [userId], references: [userId], onDelete: Cascade)
    @@map("GameRecords")
}